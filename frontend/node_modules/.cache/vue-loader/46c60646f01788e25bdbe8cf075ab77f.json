{"remainingRequest":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\src\\components\\HelloWorld.vue?vue&type=style&index=0&id=526bba5a&scoped=true&lang=css","dependencies":[{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\src\\components\\HelloWorld.vue","mtime":1616519326093},{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmgzIHsKICBtYXJnaW46IDQwcHggMCAwOwp9CnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQpsaSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG1hcmdpbjogMCAxMHB4Owp9CmEgewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["E:\\FAC\\PDL\\projet_pdl\\projet-pdl\\frontend\\src\\components\\HelloWorld.vue"],"names":[],"mappings":";AA+LA,CAAC,EAAE;EACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAClB;AACA,CAAC,EAAE;EACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACZ;AACA,CAAC,EAAE;EACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB;AACA,EAAE;EACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB","file":"E:/FAC/PDL/projet_pdl/projet-pdl/frontend/src/components/HelloWorld.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"hello\">\n\n    <h3>{{ listImages }}</h3>\n\n    <select @change=\"downloadSelectedImage(selected)\" v-model=\"selected\" >\n      <option  v-for=\"(image, index) in listImages\" :value =\"index\" :key=\"image\"> \n        {{ image }}\n      </option>\n    </select>\n\n\n<span> {{dldImage.data}} </span>\n\n<img src alt=\"\" id=\"imagedld\">\n\n  <div class=\"container\">\n    <div class=\"large-12 medium-12 small-12 cell\">\n      <label>File\n        <input type=\"file\" id=\"file\" ref=\"file\" v-on:change=\"handleFileUpload()\" />\n      </label>\n        <button v-on:click=\"submitFile()\">Submit</button>\n    </div>\n  </div>\n  <div class= \"galery\">\n    <button v-on:click=\"gallery()\">Afficher/Mettre Ã  jour la gallerie d'Images</button>\n  </div>\n\n\n  <img v-for=\"image in allImages\" :key=\"image\" :src=\"image\" :alt=\"pout\" />\n\n  <!-- <div class=\"memebox\">\n    <div class=\"meme\" v-for=\"image in allImages\" :key=\"image\" >\n      <img src=image alt=image>\n    </div>\n  </div>\n   -->\n</div>\n\n\n\n</template>\n\n\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"HelloWorld\",\n\n  /*props: {\n    msg: String,\n  },*/\n\n  data() {\n    return {\n      selected: '',\n      listImages: [],\n      pouet:1,\n      file: '',\n      dldImage: \"blob\",\n      galeryImage: \"blob\",\n      allImages:[],\n      errors: [],\n    };\n  },\n\n\n  methods: {\n    gallery() {\n      this.allImages=[];\n      let promises = [];\n\n      function asyncGallery (i) {\n        return new Promise((resolve, reject) => {\n          try {\n            axios.get('images/' + i, {responseType: \"blob\"})\n              .then((galeryImage) => {\n                var reader = new window.FileReader();\n                reader.readAsDataURL(galeryImage.data);\n                reader.onload = () => {\n                  resolve(reader.result)\n                }\n              })\n              .catch((e) => {\n                this.errors.push(e);\n              })\n\n          } catch(e) {\n            reject()\n          }\n        })\n      }\n\n\n     \n\n    for(let i = 0 ; i < this.listImages.length ; i++) {\n        promises.push(asyncGallery(i))\n        //alert(promises)\n    }\n\n    Promise.all(promises).then(\n        (result) => {\n          this.allImages = result\n        }\n      ).catch(\n        (error) =>{\n          alert(error)\n          this.errors.push(error)\n        }\n      ).finally(\n        //() => alert(\"pouet\")\n      )\n    },\n\n    getImages() {\n      //alert(\"getImage\")\n      return axios\n        .get(`images`)\n        .then((listImage) => {\n          // JSON responses are automatically parsed.\n          this.listImages = listImage.data\n          this.gallery()\n        })\n        .catch((e) => {\n          this.errors.push(e);\n        });\n      \n    },\n\n    downloadSelectedImage(url) {\n      axios.get('http://localhost:8081/images/' + url, {responseType:\"blob\"})\n           .then(function (dldImage) {\n              //alert();\n              var reader = new window.FileReader();\n              reader.readAsDataURL(dldImage.data);\n              reader.onload = function() {\n                alert(reader.result)\n                document.getElementById(\"imagedld\").setAttribute(\"src\", reader.result);\n\n              }\n            })\n            .catch((e) => {\n              this.errors.push(e);\n            });\n    },\n    \n\n    \n    handleFileUpload(){\n      this.file = this.$refs.file.files[0];\n    },\n    submitFile(){\n      let formData = new FormData();\n      formData.append('file', this.file);\n      axios.post( '/images',\n        formData,\n        {\n          headers: {\n              'Content-Type': 'multipart/form-data'\n          }\n        }\n      ).then(() => {\n        this.getImages()\n        console.log('SUCCESS!!');\n      })\n      .catch(function(){\n        console.log('FAILURE!!');\n      });\n    }\n  },\n\n\n  mounted() {\n    this.getImages();\n  },\n};\n\n\n\n\n\n\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n\n\n\n\n    "]}]}